[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "dblstreamgen"
version = "0.1.0"
description = "Databricks stream data generation for harness testing and performance validation"
readme = "README.md"
requires-python = ">=3.9"
license = { text = "Apache-2.0" }
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
keywords = [
    "databricks",
    "streaming",
    "synthetic-data",
    "testing",
    "kinesis",
    "kafka",
    "harness-testing",
    "dbldatagen",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "pyyaml>=6.0",
    "pyspark>=3.3.0",
    "dbldatagen>=0.3.0",
]

[project.optional-dependencies]
kinesis = [
    "boto3>=1.26.0",
]
kafka = [
    "confluent-kafka>=2.0.0",
    "fastavro>=1.7.0",
]
all = [
    "boto3>=1.26.0",
    "confluent-kafka>=2.0.0",
    "fastavro>=1.7.0",
]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "ruff>=0.1.0",
    "mypy>=1.0",
    "types-PyYAML",
]

[project.urls]
Homepage = "https://github.com/databrickslabs/dblstreamgen"
Documentation = "https://github.com/databrickslabs/dblstreamgen#readme"
Repository = "https://github.com/databrickslabs/dblstreamgen"
Issues = "https://github.com/databrickslabs/dblstreamgen/issues"

# Hatch build configuration
[tool.hatch.build.targets.wheel]
packages = ["src/dblstreamgen"]

# Ruff configuration
[tool.ruff]
target-version = "py39"
line-length = 100
indent-width = 4

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501", # line too long (handled by formatter)
    "B008", # do not perform function calls in argument defaults
    "B904", # Allow raising exceptions without from e
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**" = ["ARG"]      # Allow unused arguments in tests

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
strict_optional = true

[[tool.mypy.overrides]]
module = [
    "pyspark.*",
    "dbldatagen.*",
    "confluent_kafka.*",
    "fastavro.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--showlocals",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "spark: marks tests that require Spark",
    "integration: marks tests as integration tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/dblstreamgen"]
omit = [
    "*/tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]


